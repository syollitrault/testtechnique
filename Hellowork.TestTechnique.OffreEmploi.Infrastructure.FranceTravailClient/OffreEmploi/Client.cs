//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Hellowork.TestTechnique.OffreEmploi.Infrastructure.FranceTravailClient.OffreEmploi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public Client(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.francetravail.io/partenaire/offresdemploi";
            _httpClient = httpClient;
        }

        private static Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Recherche des offres selon des criteres.
        /// </summary>
        /// <param name="range">Pagination des données. La plage de résultats est limitée à 150.
        /// <br/>
        /// <br/> Format : p-d, où : &lt;ul&gt;&lt;li&gt; p est l’index (débutant à 0) du premier élément demandé ne devant pas dépasser 3000 &lt;/li&gt;&lt;li&gt; d est l’index de dernier élément demandé ne devant pas dépasser 3149 &lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="sort">Il est possible de trier les résultats de 3 façons : &lt;ul&gt;&lt;li&gt;Pertinence décroissante , distance croissante, date de création horodatée décroissante, origine de l’offre : sort=0 &lt;/li&gt;&lt;li&gt;Date de création horodatée décroissante, pertinence décroissante, distance croissante, origine de l’offre : sort=1 &lt;/li&gt;&lt;li&gt;Distance croissante, pertinence décroissante, date de création horodatée décroissante, origine de l’offre : sort=2 &lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="domaine">Domaine de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="codeROME">Code ROME de l’offre, voir le référentiel des métiers ci-dessous</param>
        /// <param name="appellation">Code appellation ROME de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="theme">Thème ROME du métier, voir le référentiel ci-dessous</param>
        /// <param name="secteurActivite">Division NAF de l’offre (2 premiers chiffres), voir le référentiel ci-dessous</param>
        /// <param name="codeNAF">Code NAF de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="experience">Niveau d’expérience demandé, (1 moins d'un an, 2 de 1 à 3 ans, 3 plus de 3 ans)</param>
        /// <param name="typeContrat">Code du type de contrat, voir le référentiel ci-dessous</param>
        /// <param name="natureContrat">Code de la nature du contrat, voir le référentiel ci-dessous</param>
        /// <param name="qualification">Qualification du poste (0 non-cadre, 9 cadre)</param>
        /// <param name="tempsPlein">Temps plein ou partiel</param>
        /// <param name="commune">Code INSEE de la commune, voir le référentiel ci-dessous</param>
        /// <param name="distance">Distance à la commune (pris en compte uniquement si une commune est renseignée, plus d'information dans la documentation)</param>
        /// <param name="departement">Département de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="inclureLimitrophes">Inclure les départements limitrophes dans la recherche</param>
        /// <param name="region">Région de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="paysContinent">Pays ou continent de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="niveauFormation">Niveau de formation demandé, voir le référentiel ci-dessous</param>
        /// <param name="permis">Permis demandé, voir le référentiel ci-dessous</param>
        /// <param name="motsCles">Recherche de mots clés dans l’offre, voir documentation</param>
        /// <param name="salaireMin">Salaire minimum recherché. Si cette donnée est renseignée, le code du type de salaire minimum est obligatoire.</param>
        /// <param name="periodeSalaire">Période pour le calcul du salaire minimum (M Mensuel, A Annuel, H Horaire, C Cachet). Si cette donnée est renseignée, le salaire minimum est obligatoire.</param>
        /// <param name="accesTravailleurHandicape">Offres pour lesquelles l’employeur est handi friendly</param>
        /// <param name="publieeDepuis">Recherche les offres publiées depuis maximum « X » jours</param>
        /// <param name="minCreationDate">Date minimale pour laquelle rechercher des offres (format yyyy-MM-dd'T'hh:mm:ss'Z')</param>
        /// <param name="maxCreationDate">Date maximale pour laquelle rechercher des offres (format yyyy-MM-dd'T'hh:mm:ss'Z')</param>
        /// <param name="offresMRS">Uniquement les offres d'emplois avec méthode de recrutement par simulation proposée</param>
        /// <param name="experienceExigence">Exigence d'expérience (D débutant accepté, S expérience souhaitée, E expérience exigée)</param>
        /// <param name="partenaires">Chaine de caractères - Liste des codes partenaires dont les offres sont à inclure ou exclure en fonction du mode de sélection associé et du filtre de l’origine de l’offre</param>
        /// <param name="modeSelectionPartenaires">Énumération (INCLUS ou EXCLU) - Mode de sélection des partenaires.</param>
        /// <param name="dureeHebdoMin">Recherche les offres avec une durée minimale (format HHMM)</param>
        /// <param name="dureeHebdoMax">Recherche les offres avec une durée maximale (format HHMM)</param>
        /// <param name="dureeContratMax">Recherche les offres avec une durée de contrat maximale (format double de 0 à 99 bornes incluses)</param>
        /// <param name="dureeContratMin">Recherche les offres avec une durée de contrat minimale (format double de 0 à 99 bornes incluses)</param>
        /// <param name="dureeHebdo_">Type de durée du contrat de l'offre</param>
        /// <param name="offresManqueCandidats">Filtre sur les offres difficiles à pouvoir</param>
        /// <param name="entreprisesAdaptees">Filtre sur les offres dont les entreprises sont adaptées</param>
        /// <returns>L'offre a été recupérée avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RecupererListeOffreResult> RecupererListeOffreAsync(string range, string sort, string domaine, string codeROME, string appellation, string theme, string secteurActivite, string codeNAF, string experience, string typeContrat, string natureContrat, string qualification, bool? tempsPlein, string commune, long? distance, string departement, bool? inclureLimitrophes, string region, string paysContinent, string niveauFormation, string permis, string motsCles, string salaireMin, string periodeSalaire, bool? accesTravailleurHandicape, long? publieeDepuis, string minCreationDate, string maxCreationDate, bool? offresMRS, string experienceExigence, string partenaires, string modeSelectionPartenaires, string dureeHebdoMin, string dureeHebdoMax, string dureeContratMax, string dureeContratMin, string dureeHebdo_, bool? offresManqueCandidats, bool? entreprisesAdaptees, string authorization)
        {
            return RecupererListeOffreAsync(range, sort, domaine, codeROME, appellation, theme, secteurActivite, codeNAF, experience, typeContrat, natureContrat, qualification, tempsPlein, commune, distance, departement, inclureLimitrophes, region, paysContinent, niveauFormation, permis, motsCles, salaireMin, periodeSalaire, accesTravailleurHandicape, publieeDepuis, minCreationDate, maxCreationDate, offresMRS, experienceExigence, partenaires, modeSelectionPartenaires, dureeHebdoMin, dureeHebdoMax, dureeContratMax, dureeContratMin, dureeHebdo_, offresManqueCandidats, entreprisesAdaptees, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche des offres selon des criteres.
        /// </summary>
        /// <param name="range">Pagination des données. La plage de résultats est limitée à 150.
        /// <br/>
        /// <br/> Format : p-d, où : &lt;ul&gt;&lt;li&gt; p est l’index (débutant à 0) du premier élément demandé ne devant pas dépasser 3000 &lt;/li&gt;&lt;li&gt; d est l’index de dernier élément demandé ne devant pas dépasser 3149 &lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="sort">Il est possible de trier les résultats de 3 façons : &lt;ul&gt;&lt;li&gt;Pertinence décroissante , distance croissante, date de création horodatée décroissante, origine de l’offre : sort=0 &lt;/li&gt;&lt;li&gt;Date de création horodatée décroissante, pertinence décroissante, distance croissante, origine de l’offre : sort=1 &lt;/li&gt;&lt;li&gt;Distance croissante, pertinence décroissante, date de création horodatée décroissante, origine de l’offre : sort=2 &lt;/li&gt;&lt;/ul&gt;</param>
        /// <param name="domaine">Domaine de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="codeROME">Code ROME de l’offre, voir le référentiel des métiers ci-dessous</param>
        /// <param name="appellation">Code appellation ROME de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="theme">Thème ROME du métier, voir le référentiel ci-dessous</param>
        /// <param name="secteurActivite">Division NAF de l’offre (2 premiers chiffres), voir le référentiel ci-dessous</param>
        /// <param name="codeNAF">Code NAF de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="experience">Niveau d’expérience demandé, (1 moins d'un an, 2 de 1 à 3 ans, 3 plus de 3 ans)</param>
        /// <param name="typeContrat">Code du type de contrat, voir le référentiel ci-dessous</param>
        /// <param name="natureContrat">Code de la nature du contrat, voir le référentiel ci-dessous</param>
        /// <param name="qualification">Qualification du poste (0 non-cadre, 9 cadre)</param>
        /// <param name="tempsPlein">Temps plein ou partiel</param>
        /// <param name="commune">Code INSEE de la commune, voir le référentiel ci-dessous</param>
        /// <param name="distance">Distance à la commune (pris en compte uniquement si une commune est renseignée, plus d'information dans la documentation)</param>
        /// <param name="departement">Département de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="inclureLimitrophes">Inclure les départements limitrophes dans la recherche</param>
        /// <param name="region">Région de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="paysContinent">Pays ou continent de l’offre, voir le référentiel ci-dessous</param>
        /// <param name="niveauFormation">Niveau de formation demandé, voir le référentiel ci-dessous</param>
        /// <param name="permis">Permis demandé, voir le référentiel ci-dessous</param>
        /// <param name="motsCles">Recherche de mots clés dans l’offre, voir documentation</param>
        /// <param name="salaireMin">Salaire minimum recherché. Si cette donnée est renseignée, le code du type de salaire minimum est obligatoire.</param>
        /// <param name="periodeSalaire">Période pour le calcul du salaire minimum (M Mensuel, A Annuel, H Horaire, C Cachet). Si cette donnée est renseignée, le salaire minimum est obligatoire.</param>
        /// <param name="accesTravailleurHandicape">Offres pour lesquelles l’employeur est handi friendly</param>
        /// <param name="publieeDepuis">Recherche les offres publiées depuis maximum « X » jours</param>
        /// <param name="minCreationDate">Date minimale pour laquelle rechercher des offres (format yyyy-MM-dd'T'hh:mm:ss'Z')</param>
        /// <param name="maxCreationDate">Date maximale pour laquelle rechercher des offres (format yyyy-MM-dd'T'hh:mm:ss'Z')</param>
        /// <param name="offresMRS">Uniquement les offres d'emplois avec méthode de recrutement par simulation proposée</param>
        /// <param name="experienceExigence">Exigence d'expérience (D débutant accepté, S expérience souhaitée, E expérience exigée)</param>
        /// <param name="partenaires">Chaine de caractères - Liste des codes partenaires dont les offres sont à inclure ou exclure en fonction du mode de sélection associé et du filtre de l’origine de l’offre</param>
        /// <param name="modeSelectionPartenaires">Énumération (INCLUS ou EXCLU) - Mode de sélection des partenaires.</param>
        /// <param name="dureeHebdoMin">Recherche les offres avec une durée minimale (format HHMM)</param>
        /// <param name="dureeHebdoMax">Recherche les offres avec une durée maximale (format HHMM)</param>
        /// <param name="dureeContratMax">Recherche les offres avec une durée de contrat maximale (format double de 0 à 99 bornes incluses)</param>
        /// <param name="dureeContratMin">Recherche les offres avec une durée de contrat minimale (format double de 0 à 99 bornes incluses)</param>
        /// <param name="dureeHebdo_">Type de durée du contrat de l'offre</param>
        /// <param name="offresManqueCandidats">Filtre sur les offres difficiles à pouvoir</param>
        /// <param name="entreprisesAdaptees">Filtre sur les offres dont les entreprises sont adaptées</param>
        /// <returns>L'offre a été recupérée avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RecupererListeOffreResult> RecupererListeOffreAsync(string range, string sort, string domaine, string codeROME, string appellation, string theme, string secteurActivite, string codeNAF, string experience, string typeContrat, string natureContrat, string qualification, bool? tempsPlein, string commune, long? distance, string departement, bool? inclureLimitrophes, string region, string paysContinent, string niveauFormation, string permis, string motsCles, string salaireMin, string periodeSalaire, bool? accesTravailleurHandicape, long? publieeDepuis, string minCreationDate, string maxCreationDate, bool? offresMRS, string experienceExigence, string partenaires, string modeSelectionPartenaires, string dureeHebdoMin, string dureeHebdoMax, string dureeContratMax, string dureeContratMin, string dureeHebdo_, bool? offresManqueCandidats, bool? entreprisesAdaptees, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/offres/search"
                    urlBuilder_.Append("v2/offres/search");
                    urlBuilder_.Append('?');
                    if (range != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("range")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(range, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sort != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sort")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sort, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (domaine != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("domaine")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(domaine, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (codeROME != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("codeROME")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(codeROME, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (appellation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("appellation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(appellation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (theme != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("theme")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(theme, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (secteurActivite != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("secteurActivite")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(secteurActivite, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (codeNAF != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("codeNAF")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(codeNAF, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (experience != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("experience")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(experience, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (typeContrat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("typeContrat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(typeContrat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (natureContrat != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("natureContrat")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(natureContrat, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (qualification != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("qualification")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(qualification, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tempsPlein != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tempsPlein")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tempsPlein, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (commune != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("commune")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(commune, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (distance != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("distance")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(distance, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (departement != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("departement")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(departement, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inclureLimitrophes != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inclureLimitrophes")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inclureLimitrophes, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (region != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("region")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(region, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paysContinent != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paysContinent")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paysContinent, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (niveauFormation != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("niveauFormation")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(niveauFormation, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (permis != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("permis")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(permis, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (motsCles != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("motsCles")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(motsCles, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (salaireMin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("salaireMin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(salaireMin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (periodeSalaire != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("periodeSalaire")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(periodeSalaire, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (accesTravailleurHandicape != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("accesTravailleurHandicape")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(accesTravailleurHandicape, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (publieeDepuis != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("publieeDepuis")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(publieeDepuis, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (minCreationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("minCreationDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(minCreationDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (maxCreationDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("maxCreationDate")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(maxCreationDate, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offresMRS != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offresMRS")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offresMRS, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (experienceExigence != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("experienceExigence")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(experienceExigence, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (partenaires != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("partenaires")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(partenaires, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modeSelectionPartenaires != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modeSelectionPartenaires")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modeSelectionPartenaires, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dureeHebdoMin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dureeHebdoMin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dureeHebdoMin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dureeHebdoMax != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dureeHebdoMax")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dureeHebdoMax, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dureeContratMax != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dureeContratMax")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dureeContratMax, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dureeContratMin != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dureeContratMin")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dureeContratMin, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dureeHebdo_ != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dureeHebdo ")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(dureeHebdo_, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (offresManqueCandidats != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("offresManqueCandidats")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(offresManqueCandidats, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (entreprisesAdaptees != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("entreprisesAdaptees")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(entreprisesAdaptees, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecupererListeOffreResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Aucune offre correspondante", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 206)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RecupererListeOffreResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Bad request", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Recherche une offre par son identifiant.
        /// </summary>
        /// <param name="id">identifiant de l’offre d’emploi</param>
        /// <returns>L'offre a été recupérée avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Offre> RecupererOffreAsync(string id, string authorization)
        {
            return RecupererOffreAsync(id, authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Recherche une offre par son identifiant.
        /// </summary>
        /// <param name="id">identifiant de l’offre d’emploi</param>
        /// <returns>L'offre a été recupérée avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Offre> RecupererOffreAsync(string id, string authorization, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/offres/{id}"
                    urlBuilder_.Append("v2/offres/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offre>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("L\'offre n\'existe pas", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des appellations ROME
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielAppellationsAsync(string authorization)
        {
            return RecupererReferentielAppellationsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des appellations ROME
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielAppellationsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/appellations"
                    urlBuilder_.Append("v2/referentiel/appellations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des communes
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Commune>> RecupererReferentielCommunesAsync(string authorization)
        {
            return RecupererReferentielCommunesAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des communes
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Commune>> RecupererReferentielCommunesAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/communes"
                    urlBuilder_.Append("v2/referentiel/communes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Commune>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des continents
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielContinentsAsync(string authorization)
        {
            return RecupererReferentielContinentsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des continents
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielContinentsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/continents"
                    urlBuilder_.Append("v2/referentiel/continents");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des departements
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Departement>> RecupererReferentielDepartementsAsync(string authorization)
        {
            return RecupererReferentielDepartementsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des departements
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Departement>> RecupererReferentielDepartementsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/departements"
                    urlBuilder_.Append("v2/referentiel/departements");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Departement>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des domaines métiers
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielDomainesMetiersAsync(string authorization)
        {
            return RecupererReferentielDomainesMetiersAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des domaines métiers
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielDomainesMetiersAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/domaines"
                    urlBuilder_.Append("v2/referentiel/domaines");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des langues
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielLanguesAsync(string authorization)
        {
            return RecupererReferentielLanguesAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des langues
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielLanguesAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/langues"
                    urlBuilder_.Append("v2/referentiel/langues");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des métiers ROME
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielMetiersAsync(string authorization)
        {
            return RecupererReferentielMetiersAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des métiers ROME
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielMetiersAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/metiers"
                    urlBuilder_.Append("v2/referentiel/metiers");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des natures de contrats
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielNaturesContratsAsync(string authorization)
        {
            return RecupererReferentielNaturesContratsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des natures de contrats
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielNaturesContratsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/naturesContrats"
                    urlBuilder_.Append("v2/referentiel/naturesContrats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des niveaux de formations
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielNiveauxFormationsAsync(string authorization)
        {
            return RecupererReferentielNiveauxFormationsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des niveaux de formations
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielNiveauxFormationsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/niveauxFormations"
                    urlBuilder_.Append("v2/referentiel/niveauxFormations");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des pays
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielPaysAsync(string authorization)
        {
            return RecupererReferentielPaysAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des pays
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielPaysAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/pays"
                    urlBuilder_.Append("v2/referentiel/pays");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des permis
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielPermisAsync(string authorization)
        {
            return RecupererReferentielPermisAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des permis
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielPermisAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/permis"
                    urlBuilder_.Append("v2/referentiel/permis");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des regions
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Region>> RecupererReferentielRegionsAsync(string authorization)
        {
            return RecupererReferentielRegionsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des regions
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Region>> RecupererReferentielRegionsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/regions"
                    urlBuilder_.Append("v2/referentiel/regions");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Region>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des secteurs d'activites
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielSecteursActivitesAsync(string authorization)
        {
            return RecupererReferentielSecteursActivitesAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des secteurs d'activites
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielSecteursActivitesAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/secteursActivites"
                    urlBuilder_.Append("v2/referentiel/secteursActivites");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des themes
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielThemesAsync(string authorization)
        {
            return RecupererReferentielThemesAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des themes
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielThemesAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/themes"
                    urlBuilder_.Append("v2/referentiel/themes");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Renvoie le referentiel des type de contrats
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielTypesContratsAsync(string authorization)
        {
            return RecupererReferentielTypesContratsAsync(authorization, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Renvoie le referentiel des type de contrats
        /// </summary>
        /// <returns>Le référentiel a été renvoyé avec succès</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Referentiel>> RecupererReferentielTypesContratsAsync(string authorization, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (authorization == null)
                        throw new System.ArgumentNullException("authorization");
                    request_.Headers.TryAddWithoutValidation("Authorization", ConvertToString(authorization, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "v2/referentiel/typesContrats"
                    urlBuilder_.Append("v2/referentiel/typesContrats");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Referentiel>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Erreur interne au serveur", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Agence Pôle Emploi
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Agence
    {
        /// <summary>
        /// N° de téléphone de l’agence Pôle Emploi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Courriel de l’agence de Pôle Emploi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courriel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Courriel { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Compétences
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Competence
    {
        /// <summary>
        /// Code de la compétence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Libellé de la compétence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// E : la compétence est exigée, S : la compétence est souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exigence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exigence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {
        /// <summary>
        /// Nom du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        /// <summary>
        /// Adresse du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coordonnees1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coordonnees1 { get; set; }

        /// <summary>
        /// Adresse du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coordonnees2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coordonnees2 { get; set; }

        /// <summary>
        /// Adresse du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coordonnees3", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coordonnees3 { get; set; }

        /// <summary>
        /// N° de téléphone du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("telephone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone { get; set; }

        /// <summary>
        /// Courriel du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("courriel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Courriel { get; set; }

        /// <summary>
        /// Précision sur le contact de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentaire", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        /// <summary>
        /// URL du recruteur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlRecruteur", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlRecruteur { get; set; }

        /// <summary>
        /// URL du formulaire de postulation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlPostulation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlPostulation { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Entreprise
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entreprise
    {
        /// <summary>
        /// Nom de l’entreprise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        /// <summary>
        /// Description de l’entreprise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// URL du logo de l’entreprise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        /// <summary>
        /// URL du site de l’entreprise
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Flag entreprise adaptee
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entrepriseAdaptee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EntrepriseAdaptee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Formations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Formation
    {
        /// <summary>
        /// Code du domaine de formation souhaité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeFormation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeFormation { get; set; }

        /// <summary>
        /// Domaine de formation souhaité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domaineLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomaineLibelle { get; set; }

        /// <summary>
        /// Niveau de formation souhaité
        /// </summary>
        [Newtonsoft.Json.JsonProperty("niveauLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NiveauLibelle { get; set; }

        /// <summary>
        /// Commentaire sur la formation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentaire", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        /// <summary>
        /// E : la formation est exigée, S : la formation est souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exigence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exigence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Langues
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Langue
    {
        /// <summary>
        /// Langue souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// E : la langue est exigée, S : la langue est souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exigence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exigence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Lieu de travail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LieuTravail
    {
        /// <summary>
        /// Libellé du lieu de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// Latitude du lieu de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Latitude { get; set; }

        /// <summary>
        /// Longitude de lieu de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Longitude { get; set; }

        /// <summary>
        /// Code postal du lieu de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codePostal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Code Insee du lieu de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commune", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commune { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offre
    {
        /// <summary>
        /// Identifiant de l’offre d’emploi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Intitulé de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("intitule", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Intitule { get; set; }

        /// <summary>
        /// Description de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Date de création de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateCreation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateCreation { get; set; }

        /// <summary>
        /// Date de dernière actualisation de l'offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateActualisation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DateActualisation { get; set; }

        [Newtonsoft.Json.JsonProperty("lieuTravail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LieuTravail LieuTravail { get; set; }

        /// <summary>
        /// Code ROME de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("romeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RomeCode { get; set; }

        /// <summary>
        /// Libellé associé au code ROME
        /// </summary>
        [Newtonsoft.Json.JsonProperty("romeLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RomeLibelle { get; set; }

        /// <summary>
        /// Libellé de l’appellation ROME de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appellationlibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Appellationlibelle { get; set; }

        [Newtonsoft.Json.JsonProperty("entreprise", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Entreprise Entreprise { get; set; }

        /// <summary>
        /// Code du type de contrat proposé (CDD, CDI, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeContrat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeContrat { get; set; }

        /// <summary>
        /// Libellé du type de contrat proposé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeContratLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeContratLibelle { get; set; }

        /// <summary>
        /// Nature du contrat (contrat d’apprentissage, etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("natureContrat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NatureContrat { get; set; }

        /// <summary>
        /// E : l’expérience est exigée, S : l’expérience est souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("experienceExige", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperienceExige { get; set; }

        /// <summary>
        /// Libellé de l’expérience 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("experienceLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperienceLibelle { get; set; }

        /// <summary>
        /// Commentaire sur l’expérience
        /// </summary>
        [Newtonsoft.Json.JsonProperty("experienceCommentaire", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExperienceCommentaire { get; set; }

        /// <summary>
        /// Formations
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Formation> Formations { get; set; }

        /// <summary>
        /// Langues
        /// </summary>
        [Newtonsoft.Json.JsonProperty("langues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Langue> Langues { get; set; }

        /// <summary>
        /// Permis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permis", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Permis> Permis { get; set; }

        /// <summary>
        /// Liste des outils bureautiques utilisés
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outilsBureautiques", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> OutilsBureautiques { get; set; }

        /// <summary>
        /// Compétences
        /// </summary>
        [Newtonsoft.Json.JsonProperty("competences", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Competence> Competences { get; set; }

        [Newtonsoft.Json.JsonProperty("salaire", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Salaire Salaire { get; set; }

        /// <summary>
        /// Libellé de la durée de travail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dureeTravailLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DureeTravailLibelle { get; set; }

        /// <summary>
        /// Temps plein ou temps partiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dureeTravailLibelleConverti", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DureeTravailLibelleConverti { get; set; }

        /// <summary>
        /// Complément exercice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complementExercice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ComplementExercice { get; set; }

        /// <summary>
        /// Valeurs du type « Travail de nuit » ; « travail en hauteur »
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionExercice", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConditionExercice { get; set; }

        /// <summary>
        /// Vrai si c’est une offre pour de l’alternance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("alternance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Alternance { get; set; }

        [Newtonsoft.Json.JsonProperty("contact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Contact Contact { get; set; }

        [Newtonsoft.Json.JsonProperty("agence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Agence Agence { get; set; }

        /// <summary>
        /// Nombre de postes disponibles pour cette offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nombrePostes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NombrePostes { get; set; }

        /// <summary>
        /// Vrai si l’offre est accessible aux travailleurs handicapés
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accessibleTH", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AccessibleTH { get; set; }

        /// <summary>
        /// Qualification du poste. Pour la qualification, on remonte les 9 valeurs 1 : manœuvre, ...8 agent de maitrise, 9 cadre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deplacementCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeplacementCode { get; set; }

        /// <summary>
        /// Description des déplacements demandés
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deplacementLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeplacementLibelle { get; set; }

        /// <summary>
        /// Qualification du poste. Pour la qualification, on remonte les 9 valeurs 1 : manœuvre, ... 8 agent de maitrise, 9 cadre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualificationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualificationCode { get; set; }

        /// <summary>
        /// Libellé de la qualification du poste
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualificationLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QualificationLibelle { get; set; }

        /// <summary>
        /// Code NAF
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeNAF", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeNAF { get; set; }

        /// <summary>
        /// division NAF (comprend les deux premiers chiffre du NAF)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secteurActivite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecteurActivite { get; set; }

        /// <summary>
        /// Secteur d’activité de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("secteurActiviteLibelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecteurActiviteLibelle { get; set; }

        /// <summary>
        /// Qualités professionnelles
        /// </summary>
        [Newtonsoft.Json.JsonProperty("qualitesProfessionnelles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QualitePro> QualitesProfessionnelles { get; set; }

        /// <summary>
        /// Libellé de la tranche d'effectif de l'etablissement
        /// </summary>
        [Newtonsoft.Json.JsonProperty("trancheEffectifEtab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TrancheEffectifEtab { get; set; }

        [Newtonsoft.Json.JsonProperty("origineOffre", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrigineOffre OrigineOffre { get; set; }

        /// <summary>
        /// Flag des offres difficiles à pourvoir
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offresManqueCandidats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OffresManqueCandidats { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Origine de l'offre
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrigineOffre
    {
        /// <summary>
        /// Origine de l’offre
        /// </summary>
        [Newtonsoft.Json.JsonProperty("origine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Origine { get; set; }

        /// <summary>
        /// URL de l’offre sur les sites des partenaires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urlOrigine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlOrigine { get; set; }

        [Newtonsoft.Json.JsonProperty("partenaires", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartenaireOffre> Partenaires { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartenaireOffre
    {
        /// <summary>
        /// Nom du partenaire
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Nom { get; set; }

        /// <summary>
        /// URL de l’offre sur les sites des partenaires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// URL du logo sur les sites des partenaires
        /// </summary>
        [Newtonsoft.Json.JsonProperty("logo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Logo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Permis
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permis
    {
        /// <summary>
        /// Permis demandé
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// E : le permis est exigée, S : la permis est souhaitée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exigence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Exigence { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Qualités professionnelles
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class QualitePro
    {
        /// <summary>
        /// Libellé de la qualité professionnelle demandée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// Description de la qualité professionnelle demandée
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Salaire
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Salaire
    {
        /// <summary>
        /// Libellé du salaire (ex : 31k€ annuel sur 12 mois)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// Commentaire sur le salaire
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commentaire", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Commentaire { get; set; }

        /// <summary>
        /// Complément 1 de rémunération (prime, véhicule…)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complement1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement1 { get; set; }

        /// <summary>
        /// Complément 2 de rémunération (prime, véhicule…)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complement2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Complement2 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Referentiel
    {
        /// <summary>
        /// Code du référentiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Libellé associé au code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Commune
    {
        /// <summary>
        /// Code du référentiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Libellé associé au code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        /// <summary>
        /// Code postal de la commune
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codePostal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodePostal { get; set; }

        /// <summary>
        /// Code du département de la commune
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeDepartement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CodeDepartement { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Departement
    {
        /// <summary>
        /// Code du référentiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Libellé associé au code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        [Newtonsoft.Json.JsonProperty("region", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Region Region { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Region
    {
        /// <summary>
        /// Code du référentiel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Libellé associé au code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("libelle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Libelle { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625